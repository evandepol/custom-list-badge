name: Validate, Build, and Test

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build TypeScript
        run: npm run build

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifact
          path: dist/

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t dropdown-list-badge-test .

      - name: Verify dist folder in image
        run: docker run --rm dropdown-list-badge-test ls -l dist

      - name: Start server
        run: |
          docker run --name dropdown-list-badge-server -d -p 5000:5000 dropdown-list-badge-test npx serve -l 5000 .
          sleep 5

      - name: Run Playwright tests
        run: |
          docker run --rm --network host \
            -v ${{ github.workspace }}/tests:/app/tests \
            -v ${{ github.workspace }}/tests/__snapshots__:/app/tests/__snapshots__ \
            -v ${{ github.workspace }}/tests/test-results:/app/tests/test-results \
            -v ${{ github.workspace }}/tests/html-report:/app/tests/html-report \
            dropdown-list-badge-test npx playwright test --config=tests/playwright.config.ts

      - name: Upload Playwright HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: tests/html-report

      - name: Stop server
        run: docker rm -f dropdown-list-badge-server || true

  commit_dist:
    runs-on: ubuntu-latest
    needs: [build, test, codeql-analysis]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-artifact
          path: dist-artifact

      - name: Copy dist artifact into repo
        run: |
          rm -rf dist
          mv dist-artifact dist

      - name: Allow dist for CI
        run: echo "!dist/" >> .gitignore

      - name: Show git status for debug 1
        run: git status

      - name: Create Pull Request for dist update
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}        
          commit-message: "chore: Build and commit dist folder for HACS"
          branch: update-dist-artifact
          title: "Update dist folder from CI"
          body: "Automated update of dist folder after successful build and test."
          base: main
          add-paths: dist/
          author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>

#  validate-hacs:
#    runs-on: ubuntu-latest
#    needs: [commit_dist]
#    continue-on-error: ${{ github.ref != 'refs/heads/main' }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4

#      - name: Download dist artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: dist-artifact
#          path: dist-artifact

#      - name: Copy dist artifact into repo
#        run: |
#          rm -rf dist
#          mv dist-artifact dist

#      - name: List files for debug
#        run: |
#          echo contents of root:
#          ls -l
#          echo contents of dist:
#          ls -l dist

#      - name: HACS validation
#        uses: hacs/action@main
#        with:
#          category: "plugin"
          
#      - name: Clean up dist after validation (not on main)
#        if: github.ref != 'refs/heads/main'
#        run: rm -rf dist

  tag_on_version_change:
    runs-on: ubuntu-latest
    needs: commit_dist
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version.json changed
        id: version_changed
        run: |
          if git show --name-only --pretty="" HEAD | grep -q "^version.json$"; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop if version.json not changed
        if: steps.version_changed.outputs.changed == 'false'
        run: |
          echo "version.json not changed, skipping tag/release."
          exit 0

      - name: Read version from version.json
        id: version
        run: |
          VERSION=$(jq -r .version version.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if tag exists
        id: check
        run: |
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag already exists"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create tag and release
        if: steps.check.outputs.tag_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  codeql-analysis:
    # For most projects, this workflow file will not need changing; you simply need
    # to commit it to your repository.
    #
    # You may wish to alter this file to override the set of languages analyzed,
    # or to provide custom queries or build logic.
    #
    # ******** NOTE ********
    # We have attempted to detect the languages in your repository. Please check
    # the `language` matrix defined below to confirm you have the correct set of
    # supported CodeQL languages.
    #
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: javascript-typescript
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'rust', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Add any setup steps before running the `github/codeql-action/init` action.
    # This includes steps like installing compilers or runtimes (`actions/setup-node`
    # or others). This is typically only required for manual builds.
    # - name: Setup runtime (example)
    #   uses: actions/setup-example@v1

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
